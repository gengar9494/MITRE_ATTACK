using System.Net;
using System.Net.Http.Headers;
using System.Text.Json;
using System.Text.RegularExpressions;
using LibGit2Sharp;
using MET.Models;
using MITREModels.YAML;
using Spectre.Console;
using Spectre.Console.Rendering;
using YamlDotNet.Serialization;
using YamlDotNet.Serialization.NamingConventions;
using Color = System.Drawing.Color;
using OfficeOpenXml;
using OfficeOpenXml.DataValidation;
using OfficeOpenXml.Style;

namespace MET;

public class AtomicTestTool
{
    public Dictionary<string, Dictionary<string, TechniqueContainer>> Index { get; set; } = 
        new Dictionary<string, Dictionary<string, TechniqueContainer>>();
    
    public void CreateMitreAtomicTestFile()
    {
        var indexFile = new FileInfo(Path.Combine(Program.AtomicsPath, "atomics", "Indexes", "index.yaml"));

        if (!indexFile.Exists)
            throw new FileNotFoundException("Index file not found.", indexFile.FullName);
        
        var platform = AnsiConsole.Prompt(
            new SelectionPrompt<string>()
                .Title("Select Platform")
                .PageSize(100)
                .AddChoices(new[]
                {
                    "Windows",
                    "Linux",
                    "MacOS",
                }));
        
        var excelFileName = string.Format("Atomic Tests {0} {1:yyyyMMdd-HHmmss}.xlsx", platform, DateTime.Now);
        var excelFile = new FileInfo(Path.Combine(Program.AppDataPath, excelFileName));

        ReadIndexFile(indexFile);
        CreateMitreAtomicTestFile(excelFile, platform);
    }

    private void CreateMitreAtomicTestFile(FileInfo excelFile, string platform)
    {
        using (var package = new ExcelPackage())
        {
            var ws = package.Workbook.Worksheets.Add(platform);
            var rowIndex = 1;
            var rowOffset = 1;
            var colIndex = 1;

            var columns = CreateColumns();

            ws.Cells[1, 1, 1, columns.Count].Style.Fill.PatternType = ExcelFillStyle.Solid;
            ws.Cells[1, 1, 1, columns.Count].Style.Fill.BackgroundColor.SetColor(Color.Gray);
            ws.Cells[1, 1, 1, columns.Count].AutoFilter = true;
            ws.Row(1).Height = 26;
            ws.View.FreezePanes(2, 1);

            foreach (var column in columns.Values)
            {
                ws.Cells[1, colIndex].Value = column.ColumnName;
                ws.Cells[1, colIndex].Style.Font.Bold = true;

                ws.Column(colIndex).Width = column.ColumnWidth;
                ws.Column(colIndex).Style.WrapText = column.WrapText;
                ws.Column(colIndex).Hidden = column.Hidden;

                if (!string.IsNullOrEmpty(column.NumberFormat))
                    ws.Column(colIndex).Style.Numberformat.Format = column.NumberFormat;

                if (column.System)
                {
                    ws.Cells[1, colIndex].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    ws.Cells[1, colIndex].Style.Fill.BackgroundColor.SetColor(Color.RoyalBlue);
                }

                ws.Cells[1, colIndex].Style.WrapText = true;

                colIndex += 1;
            }

            var items = new Dictionary<Guid, AtomicTest>();
            
            foreach (var techContainers in Index.Values)
            {
                foreach (var techContainer in techContainers.Values)
                {
                    foreach (var atomicTest in techContainer.AtomicTests)
                    {
                        if (items.ContainsKey(atomicTest.AutoGeneratedGuid))
                            continue;
                        
                        if (!atomicTest.SupportedPlatforms.Contains(platform.ToLower()))
                            continue;
                        
                        atomicTest.Technique = techContainer.Technique;
                        
                        items.Add(atomicTest.AutoGeneratedGuid, atomicTest);
                    }
                }
            }
            
            foreach (var atomicTest in items.Values)
            {
                colIndex = 1;

                ws.Cells[rowIndex + rowOffset, colIndex++].Value = rowIndex;
                ws.Cells[rowIndex + rowOffset, colIndex++].Value = atomicTest.Technique.Id;
                ws.Cells[rowIndex + rowOffset, colIndex++].Value = 
                    atomicTest.Technique.ExternalReferences.Single(x => x.SourceName == "mitre-attack").ExternalId;
                ws.Cells[rowIndex + rowOffset, colIndex++].Value = atomicTest.AutoGeneratedGuid;
                ws.Cells[rowIndex + rowOffset, colIndex++].Value = atomicTest.Name;
                ws.Cells[rowIndex + rowOffset, colIndex++].Value = atomicTest.Description;
                ws.Cells[rowIndex + rowOffset, colIndex++].Value = atomicTest.Executor.ElevationRequired;
                
                colIndex = columns["Check Prereq"].ColIndex;

                ws.Cells[rowIndex + rowOffset, colIndex++].Value =
                    string.Format("Invoke-AtomicTest {0} -TestGuids {1} -Session $sess -CheckPrereq",
                        atomicTest.Technique.ExternalReferences.Single(x => x.SourceName == "mitre-attack").ExternalId,
                        atomicTest.AutoGeneratedGuid);
                
                ws.Cells[rowIndex + rowOffset, colIndex++].Value =
                    string.Format("Invoke-AtomicTest {0} -TestGuids {1} -Session $sess -GetPrereq",
                        atomicTest.Technique.ExternalReferences.Single(x => x.SourceName == "mitre-attack").ExternalId,
                        atomicTest.AutoGeneratedGuid);
                
                ws.Cells[rowIndex + rowOffset, colIndex++].Value =
                    string.Format("Invoke-AtomicTest {0} -TestGuids {1} -Session $sess -LoggingModule \"Attire-ExecutionLogger\" -ExecutionLogPath {2}",
                        atomicTest.Technique.ExternalReferences.Single(x => x.SourceName == "mitre-attack").ExternalId,
                        atomicTest.AutoGeneratedGuid,
                        string.Format("{0}-{1}-timestamp.json", 
                            atomicTest.Technique.ExternalReferences.Single(x => x.SourceName == "mitre-attack").ExternalId,
                            atomicTest.AutoGeneratedGuid));
                
                ws.Cells[rowIndex + rowOffset, colIndex++].Value =
                    string.Format("Invoke-AtomicTest {0} -TestGuids {1} -Session $sess -Cleanup",
                        atomicTest.Technique.ExternalReferences.Single(x => x.SourceName == "mitre-attack").ExternalId,
                        atomicTest.AutoGeneratedGuid);
                
                rowIndex += 1;
            }
            
            var wsConfig = package.Workbook.Worksheets.Add("CONFIG");
            
            wsConfig.Cells[1, 1].Value = "Document Version";
            wsConfig.Cells[1, 2].Value = "1.0";
            
            wsConfig.Cells[2, 1].Value = "Attack Spec Version";

            if (string.IsNullOrWhiteSpace(items.First().Value.Technique.XMitreAttackSpecVersion))
            {
                wsConfig.Cells[2, 2].Value = "2.0.0";
            }
            else
            {
                wsConfig.Cells[2, 2].Value = items.First().Value.Technique.XMitreAttackSpecVersion;
            }

            package.SaveAs(excelFile);
        }
    }
    
    private Dictionary<string, Column> CreateColumns()
    {
        var colIndex = 1;
        
        var columns = new Dictionary<string, Column>();
        columns.Add("Sort No.", new Column() {ColumnName = "Sort No.", ColumnWidth = 10, WrapText = false, Hidden = false, ColIndex = colIndex++});
        columns.Add("Technique STIX ID", new Column() {ColumnName = "Technique STIX ID", ColumnWidth = 55, WrapText = false, Hidden = true,  ColIndex = colIndex++});
        columns.Add("Technique ID", new Column() {ColumnName = "Technique ID", ColumnWidth = 15, WrapText = false, ColIndex = colIndex++});
        columns.Add("Auto Generated GUID", new Column() {ColumnName = "Auto Generated GUID", ColumnWidth = 38, WrapText = false, Hidden = false, ColIndex = colIndex++});
        columns.Add("Atomic Test Name", new Column() {ColumnName = "Atomic Test Name", ColumnWidth = 36, WrapText = true, Hidden = false, ColIndex = colIndex++});
        columns.Add("Atomic Test Description", new Column() {ColumnName = "Atomic Test Description", ColumnWidth = 55, WrapText = true, Hidden = false, ColIndex = colIndex++});
        columns.Add("Elevation Required", new Column() {ColumnName = "Elevation Required", ColumnWidth = 11, WrapText = false, Hidden = false, ColIndex = colIndex++});
        columns.Add("Mitigation?", new Column() {ColumnName = "Mitigation?", ColumnWidth = 13, WrapText = false, Hidden = false, ColIndex = colIndex++});
        columns.Add("Detection?", new Column() {ColumnName = "Detection?", ColumnWidth = 13, WrapText = false, Hidden = false, ColIndex = colIndex++});
        columns.Add("Executed At", new Column() {ColumnName = "Executed At", ColumnWidth = 15, WrapText = false, Hidden = false, ColIndex = colIndex++});
        columns.Add("Remarks", new Column() {ColumnName = "Remarks", ColumnWidth = 36, WrapText = true, Hidden = false, ColIndex = colIndex++});
        columns.Add("Check Prereq", new Column() {ColumnName = "Check Prereq", ColumnWidth = 15, WrapText = false, Hidden = false, ColIndex = colIndex++});
        columns.Add("Get Prereq", new Column() {ColumnName = "Get Prereq", ColumnWidth = 15, WrapText = false, Hidden = false, ColIndex = colIndex++});
        columns.Add("Run", new Column() {ColumnName = "Run", ColumnWidth = 15, WrapText = false, Hidden = false, ColIndex = colIndex++});
        columns.Add("Cleanup", new Column() {ColumnName = "Cleanup", ColumnWidth = 15, WrapText = false, Hidden = false, ColIndex = colIndex++});
        return columns;
    }
    
    public async Task DownloadMitreAtomicTestIndexFile()
    {
        var fileUrl = "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/refs/heads/master/atomics/Indexes/index.yaml";
        var apiUrl = "https://api.github.com/repos/redcanaryco/atomic-red-team/commits?path=atomics/Indexes/index.yaml";
        
        using var client = new HttpClient();
        client.DefaultRequestHeaders.UserAgent.Add(new ProductInfoHeaderValue("MET", "1.0"));

        var response = await client.GetStringAsync(apiUrl);
        
        using var doc = JsonDocument.Parse(response);
        var root = doc.RootElement;
        
        if (root.GetArrayLength() > 0)
        {
            var latestCommit = root[0];
            var sha = latestCommit.GetProperty("sha").GetString()!.Substring(0, 7);
            var date = latestCommit.GetProperty("commit").GetProperty("committer").GetProperty("date").GetDateTime()!;
            
            var fileName = $"index_{sha}_{date:yyyyMMdd}.yaml";
            var filePath = Path.Combine(Program.AppDataPath, fileName);
        
            await client.DownloadFileTaskAsync(fileUrl, filePath);
        }
        else
        {
            Console.WriteLine("No commits found for this file.");
        }
    }
    
    private void ReadIndexFile(FileInfo indexFile)
    {
        var deserializer = new DeserializerBuilder()
            .WithNamingConvention(UnderscoredNamingConvention.Instance)
            .Build();
        
        Index = deserializer.Deserialize<Dictionary<string, Dictionary<string, TechniqueContainer>>>(File.ReadAllText(indexFile.FullName));
    }
    
    private FileInfo SelectIndexFile()
    {
        var files = new List<FileInfo>();

        foreach (var filePath in Directory.EnumerateFiles(Program.AtomicsPath, "*.yaml", SearchOption.AllDirectories))
        {
            var file = new FileInfo(filePath);
            files.Add(file);
        }
        
        var stixFileName = AnsiConsole.Prompt(
            new SelectionPrompt<string>()
                .Title("Select Index File?")
                .PageSize(20)
                .AddChoices(files.Select(x => x.Name).OrderByDescending(x => x)));

        return files.Single(x => x.Name == stixFileName);
    }

    public async Task CreateMitreAtomicTestPackage()
    {
        var indexFile = SelectIndexFile();
        var platform = AnsiConsole.Prompt(
            new SelectionPrompt<string>()
                .Title("Select Platform")
                .PageSize(100)
                .AddChoices(new[]
                {
                    "Windows",
                    "Linux",
                    "MacOS",
                }));
        
        // var localIIS = AnsiConsole.Prompt(
        //     new TextPrompt<string>("Local IIS URL:")
        //         .DefaultValue("http://yellowstone/")
        // );
        
        AnsiConsole.Clear();
        
        ReadIndexFile(indexFile);
        
        var atomicTests = new Dictionary<Guid, AtomicTest>();
            
        foreach (var techContainers in Index.Values)
        {
            foreach (var techContainer in techContainers.Values)
            {
                foreach (var atomicTest in techContainer.AtomicTests)
                {
                    if (atomicTests.ContainsKey(atomicTest.AutoGeneratedGuid))
                        continue;
                        
                    if (!atomicTest.SupportedPlatforms.Contains(platform.ToLower()))
                        continue;
                        
                    atomicTest.Technique = techContainer.Technique;
                        
                    atomicTests.Add(atomicTest.AutoGeneratedGuid, atomicTest);
                }
            }
        }
        
        var atomicTestDir = Path.Combine(Program.AtomicsPath, Path.GetFileNameWithoutExtension(indexFile.Name));
        
        Directory.CreateDirectory(atomicTestDir);
        
        var serializer = new SerializerBuilder()
            .WithNamingConvention(CamelCaseNamingConvention.Instance) // optional
            .Build();
        
        foreach (var atomicTest in atomicTests.Values)
        {
            var yaml = serializer.Serialize(atomicTest);
            
            // File.WriteAllText(atomicTest.AutoGeneratedGuid, yaml);
            
            // AnsiConsole.MarkupLine($"[bold grey] Processing Guid: {atomicTest.AutoGeneratedGuid}[/]");
            //
            // if (atomicTest.AutoGeneratedGuid.ToString() == "8bebc690-18c7-4549-bc98-210f7019efff")
            // {
            //     
            // }
            
            // foreach (var dep in atomicTest.Dependencies)
            // {
            //     await LocaliseUrls(dep, atomicTest.InputArguments, localIIS);
            // }

        }

    }
    
    // private async Task LocaliseUrls(
    //     string command, 
    //     Dictionary<string, InputArgument> inputArguments, 
    //     string localIIS)
    // {
    //     if (command.Contains("http") ||
    //         command.Contains("www"))
    //     {
    //         var regex = new Regex(@"https?:[^\s\""'""]+", RegexOptions.IgnoreCase);
    //         var matches = regex.Matches(command);
    //
    //         foreach (Match match in matches)
    //         {
    //             var url = new Uri(match.Value);
    //
    //             url = ReplacePlaceholders(url, inputArguments);
    //             
    //             var isPayload = IsPayload(url);
    //
    //             if (isPayload.Result)
    //             {
    //                 var newUri = new Uri($"{localIIS}{url.Segments.Last()}");
    //                 dep.GetPrereqCommand = dep.GetPrereqCommand.Replace(match.Value, newUri.AbsoluteUri);
    //                 
    //                 await DownloadPayload(url);
    //             }
    //             else
    //             {
    //                 AnsiConsole.WriteLine($"Check {dep.GetPrereqCommand}");
    //             }
    //         }
    //     }
    // }

    private Uri ReplacePlaceholders(Uri uri, Dictionary<string, InputArgument> inputArguments)
    {
        var regex = new Regex(@"#\{([^}]+)\}", RegexOptions.IgnoreCase);
        var rawUri = WebUtility.UrlDecode(uri.AbsoluteUri);
        var matches = regex.Matches(rawUri);

        foreach (Match match in matches)
        {
            if (inputArguments.ContainsKey(match.Groups[1].Value))
            {
                rawUri = rawUri.Replace(match.Value, inputArguments[match.Groups[1].Value].Default);
            }
        }
        
        return new Uri(rawUri);
    }
    
    private async Task<bool> IsPayload(Uri url)
    {
        var contentType =  GetContentType(url);

        return contentType.Result switch
        {
            "text/plain" => true,
            "text/xml" => true,
            "text/html" => false,
            "application/x-msdos-program" => true,
            "application/octet-stream" => true,
            "application/x-zip-compressed" => true,
            "application/xml" => true,
            "application/x-msdownload" => true,
            "application/x-msi" => true,
            "application/zip" => true,
            "application/x-7z-compressed" => true,
            "image/jpeg" => true,
            _ => false
        };
    }
    
    private async Task DownloadPayload(Uri url)
    {
        var handler = new HttpClientHandler
        {
            ServerCertificateCustomValidationCallback = (request, cert, chain, errors) => true
        };
        var fileName = Path.Combine(Program.PayloadsPath, url.Segments.Last());

        if (File.Exists(fileName))
            return;
        
        using (var client = new HttpClient(handler))
        {
            await client.DownloadFileTaskAsync(url.AbsoluteUri, fileName);
        }
    }
    
    private async Task<string?> GetContentType(Uri uri)
    {
        var handler = new HttpClientHandler
        {
            ServerCertificateCustomValidationCallback = (request, cert, chain, errors) => true
        };
            
        using (var client = new HttpClient(handler))
        {
            var request = new HttpRequestMessage(HttpMethod.Head, uri);
            var response = await client.SendAsync(request);
                
            return response.Content.Headers.ContentType?.MediaType;
        }
    }

    public void CloneAtomicTestRepo()
    {
        var repoUrl = "https://github.com/redcanaryco/atomic-red-team.git";

        Console.WriteLine("Cloning repository...");
        Repository.Clone(repoUrl, Program.AtomicsPath);
    }
}