using MET.Models;
using MITREModels.YAML;
using Spectre.Console;
using YamlDotNet.Serialization;
using YamlDotNet.Serialization.NamingConventions;
using Color = System.Drawing.Color;
using OfficeOpenXml;
using OfficeOpenXml.DataValidation;
using OfficeOpenXml.Style;

namespace MET;

public class AtomicTestTool
{
    public Dictionary<string, Dictionary<string, TechniqueContainer>> Index { get; set; } = 
        new Dictionary<string, Dictionary<string, TechniqueContainer>>();
    
    public void CreateMitreAtomicTestFile()
    {
        var indexFile = SelectIndexFile();
        var platform = AnsiConsole.Prompt(
            new SelectionPrompt<string>()
                .Title("Select Platform")
                .PageSize(100)
                .AddChoices(new[]
                {
                    "Windows",
                    "Linux",
                    "MacOS",
                }));
        
        var excelFileName = string.Format("Atomic Tests {0} {1:yyyyMMdd-HHmmss}.xlsx", platform, DateTime.Now);
        var excelFile = new FileInfo(Path.Combine(Program.AppDataPath, excelFileName));

        ReadIndexFile(indexFile);
        CreateMitreAtomicTestFile(excelFile, platform);
    }

    private void CreateMitreAtomicTestFile(FileInfo excelFile, string platform)
    {
        using (var package = new ExcelPackage())
        {
            var ws = package.Workbook.Worksheets.Add(platform);
            var rowIndex = 1;
            var rowOffset = 1;
            var colIndex = 1;

            var columns = CreateColumns();

            ws.Cells[1, 1, 1, columns.Count].Style.Fill.PatternType = ExcelFillStyle.Solid;
            ws.Cells[1, 1, 1, columns.Count].Style.Fill.BackgroundColor.SetColor(Color.Gray);
            ws.Cells[1, 1, 1, columns.Count].AutoFilter = true;
            ws.Row(1).Height = 26;
            ws.View.FreezePanes(2, 1);

            foreach (var column in columns.Values)
            {
                ws.Cells[1, colIndex].Value = column.ColumnName;
                ws.Cells[1, colIndex].Style.Font.Bold = true;

                ws.Column(colIndex).Width = column.ColumnWidth;
                ws.Column(colIndex).Style.WrapText = column.WrapText;
                ws.Column(colIndex).Hidden = column.Hidden;

                if (!string.IsNullOrEmpty(column.NumberFormat))
                    ws.Column(colIndex).Style.Numberformat.Format = column.NumberFormat;

                if (column.System)
                {
                    ws.Cells[1, colIndex].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    ws.Cells[1, colIndex].Style.Fill.BackgroundColor.SetColor(Color.RoyalBlue);
                }

                ws.Cells[1, colIndex].Style.WrapText = true;

                colIndex += 1;
            }

            var items = new Dictionary<Guid, AtomicTest>();
            
            foreach (var techContainers in Index.Values)
            {
                foreach (var techContainer in techContainers.Values)
                {
                    foreach (var atomicTest in techContainer.AtomicTests)
                    {
                        if (items.ContainsKey(atomicTest.AutoGeneratedGuid))
                            continue;
                        
                        if (!atomicTest.SupportedPlatforms.Contains(platform.ToLower()))
                            continue;
                        
                        atomicTest.Technique = techContainer.Technique;
                        
                        items.Add(atomicTest.AutoGeneratedGuid, atomicTest);
                    }
                }
            }
            
            foreach (var atomicTest in items.Values)
            {
                colIndex = 1;

                ws.Cells[rowIndex + rowOffset, colIndex++].Value = rowIndex;
                ws.Cells[rowIndex + rowOffset, colIndex++].Value = atomicTest.Technique.Id;
                ws.Cells[rowIndex + rowOffset, colIndex++].Value = 
                    atomicTest.Technique.ExternalReferences.Single(x => x.SourceName == "mitre-attack").ExternalId;
                ws.Cells[rowIndex + rowOffset, colIndex++].Value = atomicTest.AutoGeneratedGuid;
                ws.Cells[rowIndex + rowOffset, colIndex++].Value = atomicTest.Name;
                ws.Cells[rowIndex + rowOffset, colIndex++].Value = atomicTest.Description;
                ws.Cells[rowIndex + rowOffset, colIndex++].Value = atomicTest.Executor.ElevationRequired;
                
                colIndex = columns["Check Prereq"].ColIndex;

                ws.Cells[rowIndex + rowOffset, colIndex++].Value =
                    string.Format("Invoke-AtomicTest {0} -TestGuids {1} -Session $sess -CheckPrereq",
                        atomicTest.Technique.ExternalReferences.Single(x => x.SourceName == "mitre-attack").ExternalId,
                        atomicTest.AutoGeneratedGuid);
                
                ws.Cells[rowIndex + rowOffset, colIndex++].Value =
                    string.Format("Invoke-AtomicTest {0} -TestGuids {1} -Session $sess -GetPrereq",
                        atomicTest.Technique.ExternalReferences.Single(x => x.SourceName == "mitre-attack").ExternalId,
                        atomicTest.AutoGeneratedGuid);
                
                ws.Cells[rowIndex + rowOffset, colIndex++].Value =
                    string.Format("Invoke-AtomicTest {0} -TestGuids {1} -Session $sess",
                        atomicTest.Technique.ExternalReferences.Single(x => x.SourceName == "mitre-attack").ExternalId,
                        atomicTest.AutoGeneratedGuid);
                
                ws.Cells[rowIndex + rowOffset, colIndex++].Value =
                    string.Format("Invoke-AtomicTest {0} -TestGuids {1} -Session $sess -Cleanup",
                        atomicTest.Technique.ExternalReferences.Single(x => x.SourceName == "mitre-attack").ExternalId,
                        atomicTest.AutoGeneratedGuid);
                
                rowIndex += 1;
            }

            
            var wsConfig = package.Workbook.Worksheets.Add("CONFIG");
            
            wsConfig.Cells[1, 1].Value = "Document Version";
            wsConfig.Cells[1, 2].Value = "1.0";
            
            wsConfig.Cells[2, 1].Value = "Attack Spec Version";

            if (string.IsNullOrWhiteSpace(items.First().Value.Technique.XMitreAttackSpecVersion))
            {
                wsConfig.Cells[2, 2].Value = "2.0.0";
            }
            else
            {
                wsConfig.Cells[2, 2].Value = items.First().Value.Technique.XMitreAttackSpecVersion;
            }

            package.SaveAs(excelFile);
        }
    }
    
    private Dictionary<string, Column> CreateColumns()
    {
        var colIndex = 1;
        
        var columns = new Dictionary<string, Column>();
        columns.Add("Sort No.", new Column() {ColumnName = "Sort No.", ColumnWidth = 10, WrapText = false, Hidden = false, ColIndex = colIndex++});
        columns.Add("Technique STIX ID", new Column() {ColumnName = "Technique STIX ID", ColumnWidth = 55, WrapText = false, Hidden = true,  ColIndex = colIndex++});
        columns.Add("Technique ID", new Column() {ColumnName = "Technique ID", ColumnWidth = 15, WrapText = false, ColIndex = colIndex++});
        columns.Add("Auto Generated GUID", new Column() {ColumnName = "Auto Generated GUID", ColumnWidth = 38, WrapText = false, Hidden = false, ColIndex = colIndex++});
        columns.Add("Atomic Test Name", new Column() {ColumnName = "Atomic Test Name", ColumnWidth = 36, WrapText = true, Hidden = false, ColIndex = colIndex++});
        columns.Add("Atomic Test Description", new Column() {ColumnName = "Atomic Test Description", ColumnWidth = 55, WrapText = true, Hidden = false, ColIndex = colIndex++});
        columns.Add("Elevation Required", new Column() {ColumnName = "Elevation Required", ColumnWidth = 11, WrapText = false, Hidden = false, ColIndex = colIndex++});
        columns.Add("Mitigation?", new Column() {ColumnName = "Mitigation?", ColumnWidth = 13, WrapText = false, Hidden = false, ColIndex = colIndex++});
        columns.Add("Detection?", new Column() {ColumnName = "Detection?", ColumnWidth = 13, WrapText = false, Hidden = false, ColIndex = colIndex++});
        columns.Add("Executed At", new Column() {ColumnName = "Executed At", ColumnWidth = 15, WrapText = false, Hidden = false, ColIndex = colIndex++});
        columns.Add("Remarks", new Column() {ColumnName = "Remarks", ColumnWidth = 36, WrapText = true, Hidden = false, ColIndex = colIndex++});
        columns.Add("Check Prereq", new Column() {ColumnName = "Check Prereq", ColumnWidth = 15, WrapText = false, Hidden = false, ColIndex = colIndex++});
        columns.Add("Get Prereq", new Column() {ColumnName = "Get Prereq", ColumnWidth = 15, WrapText = false, Hidden = false, ColIndex = colIndex++});
        columns.Add("Run", new Column() {ColumnName = "Run", ColumnWidth = 15, WrapText = false, Hidden = false, ColIndex = colIndex++});
        columns.Add("Cleanup", new Column() {ColumnName = "Cleanup", ColumnWidth = 15, WrapText = false, Hidden = false, ColIndex = colIndex++});
        return columns;
    }
    
    public async Task DownloadMitreAtomicTestIndexFile()
    {
        var fileUrl = "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/refs/heads/master/atomics/Indexes/index.yaml";
        var fileName = "index.yaml";
        var filePath = Path.Combine(Program.AppDataPath, fileName);

        using (var client = new HttpClient())
        {
            await client.DownloadFileTaskAsync(fileUrl, filePath);
        }
    }
    
    private void ReadIndexFile(FileInfo indexFile)
    {
        var deserializer = new DeserializerBuilder()
            .WithNamingConvention(UnderscoredNamingConvention.Instance)
            .Build();
        
        Index = deserializer.Deserialize<Dictionary<string, Dictionary<string, TechniqueContainer>>>(File.ReadAllText(indexFile.FullName));
    }
    
    private FileInfo SelectIndexFile()
    {
        var files = new List<FileInfo>();

        foreach (var filePath in Directory.EnumerateFiles(Program.AppDataPath, "*.yaml", SearchOption.AllDirectories))
        {
            var file = new FileInfo(filePath);
            files.Add(file);
        }
        
        var stixFileName = AnsiConsole.Prompt(
            new SelectionPrompt<string>()
                .Title("Select Index File?")
                .PageSize(20)
                .AddChoices(files.Select(x => x.Name).OrderByDescending(x => x)));

        return files.Single(x => x.Name == stixFileName);
    }
}